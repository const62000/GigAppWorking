// <auto-generated />
using System;
using GigApp.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GigApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241025201253_Add_Notification_Table")]
    partial class Add_Notification_Table
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GigApp.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Label")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("StateProvince")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StreetAddress1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StreetAddress2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Addresse__3214EC079838E5E8");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdminUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Companie__3214EC07898B729E");

                    b.HasIndex("AdminUserId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.CompanyLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("CreatedByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__CompanyL__3214EC0747145E5C");

                    b.HasIndex("AddressId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("CompanyLocations");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Pricing")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Contract__3214EC07303B18F7");

                    b.HasIndex("FacilityId");

                    b.HasIndex("VendorId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.FacilityManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Facility__3214EC078FD18450");

                    b.HasIndex("FacilityId");

                    b.HasIndex("UserId");

                    b.ToTable("FacilityManagers");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Freelancer", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<string>("BankAccountInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("LicenseInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("PK__Freelanc__1788CC4C296A1722");

                    b.HasIndex("AddressId");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.FreelancerLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FreelancerUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("IssuedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("IssuedDate")
                        .HasColumnType("date");

                    b.Property<string>("LicenseFileType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LicenseFileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Freelanc__3214EC07A91848B0");

                    b.HasIndex("FreelancerUserId");

                    b.ToTable("FreelancerLicenses");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Invoices__3214EC078C6841DE");

                    b.HasIndex("ContractId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("JobManagerUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Jobs__3214EC0772D015A5");

                    b.HasIndex("AddressId");

                    b.HasIndex("FacilityId");

                    b.HasIndex("JobManagerUserId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.JobApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("FreelancerUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("JobApplicationStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("JobId")
                        .HasColumnType("bigint");

                    b.Property<string>("Proposal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ProposalHourlyRate")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool?>("Viewed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("WithdrawalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WithdrawalReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WithdrawalStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__JobAppli__3214EC072A5EE321");

                    b.HasIndex("FreelancerUserId");

                    b.HasIndex("JobId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.JobQuestionnaire", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("JobId")
                        .HasColumnType("bigint");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__JobQuest__3214EC076E47F9D4");

                    b.HasIndex("JobId");

                    b.ToTable("JobQuestionnaires");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.JobQuestionnaireAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("JobApplicationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__JobQuest__3214EC07416D966B");

                    b.HasIndex("JobApplicationId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("JobQuestionnaireAnswers");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasViewed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("CardLastFour")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("JobId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Payments__3214EC07708FE549");

                    b.HasIndex("JobId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardLastFour")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("StripePaymentMethodId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__PaymentM__3214EC07147B269F");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Auth0UserId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<long?>("DisabledByUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC072E9C31C9");

                    b.HasIndex("DisabledByUserId");

                    b.HasIndex(new[] { "Auth0UserId" }, "UQ__Users__1C8F42901DE32F1E")
                        .IsUnique()
                        .HasFilter("[Auth0UserId] IS NOT NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534AEDC4F06")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.UserDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevices");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Certifications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ServicesOffered")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Vendors__3214EC07ABA49CF8");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Address", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.Company", "Company")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Addresses_Company");

                    b.HasOne("GigApp.Domain.Entities.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Addresses_User");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Company", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.User", "AdminUser")
                        .WithMany("Companies")
                        .HasForeignKey("AdminUserId")
                        .HasConstraintName("FK_Companies_AdminUser");

                    b.Navigation("AdminUser");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.CompanyLocation", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.Address", "Address")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_CompanyLocations_Address");

                    b.HasOne("GigApp.Domain.Entities.Company", "Company")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_CompanyLocations_Company");

                    b.HasOne("GigApp.Domain.Entities.User", "CreatedByUser")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("CreatedByUserId")
                        .HasConstraintName("FK_CompanyLocations_CreatedByUser");

                    b.Navigation("Address");

                    b.Navigation("Company");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Contract", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.Company", "Facility")
                        .WithMany("Contracts")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK__Contracts__Facil__0697FACD");

                    b.HasOne("GigApp.Domain.Entities.Vendor", "Vendor")
                        .WithMany("Contracts")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK__Contracts__Vendo__05A3D694");

                    b.Navigation("Facility");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.FacilityManager", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.Company", "Facility")
                        .WithMany("FacilityManagers")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK__FacilityM__Facil__0F2D40CE");

                    b.HasOne("GigApp.Domain.Entities.User", "User")
                        .WithMany("FacilityManagers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__FacilityM__UserI__0E391C95");

                    b.Navigation("Facility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Freelancer", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.Address", "Address")
                        .WithMany("Freelancers")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__Freelance__Addre__671F4F74");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.FreelancerLicense", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.User", "FreelancerUser")
                        .WithMany("FreelancerLicenses")
                        .HasForeignKey("FreelancerUserId")
                        .HasConstraintName("FK__Freelance__Freel__6AEFE058");

                    b.Navigation("FreelancerUser");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.Contract", "Contract")
                        .WithMany("Invoices")
                        .HasForeignKey("ContractId")
                        .HasConstraintName("FK__Invoices__Contra__0A688BB1");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Job", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.Address", "Address")
                        .WithMany("Jobs")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Jobs_Address");

                    b.HasOne("GigApp.Domain.Entities.Company", "Facility")
                        .WithMany("Jobs")
                        .HasForeignKey("FacilityId")
                        .HasConstraintName("FK_Jobs_Facility");

                    b.HasOne("GigApp.Domain.Entities.User", "JobManagerUser")
                        .WithMany("Jobs")
                        .HasForeignKey("JobManagerUserId")
                        .HasConstraintName("FK_Jobs_JobManager");

                    b.Navigation("Address");

                    b.Navigation("Facility");

                    b.Navigation("JobManagerUser");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.JobApplication", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.User", "FreelancerUser")
                        .WithMany("JobApplications")
                        .HasForeignKey("FreelancerUserId")
                        .HasConstraintName("FK_JobApplications_Freelancer");

                    b.HasOne("GigApp.Domain.Entities.Job", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_JobApplications_Job");

                    b.Navigation("FreelancerUser");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.JobQuestionnaire", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.Job", "Job")
                        .WithMany("JobQuestionnaires")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_JobQuestionnaires_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.JobQuestionnaireAnswer", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.JobApplication", "JobApplication")
                        .WithMany("JobQuestionnaireAnswers")
                        .HasForeignKey("JobApplicationId")
                        .HasConstraintName("FK__JobQuesti__JobAp__793DFFAF");

                    b.HasOne("GigApp.Domain.Entities.JobQuestionnaire", "Question")
                        .WithMany("JobQuestionnaireAnswers")
                        .HasForeignKey("QuestionId")
                        .HasConstraintName("FK__JobQuesti__Quest__7A3223E8");

                    b.HasOne("GigApp.Domain.Entities.User", "User")
                        .WithMany("JobQuestionnaireAnswers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__JobQuesti__UserI__7B264821");

                    b.Navigation("JobApplication");

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Notification", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Payment", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.Job", "Job")
                        .WithMany("Payments")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_Payments_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.PaymentMethod", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.Company", "Company")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK__PaymentMe__Compa__13F1F5EB");

                    b.HasOne("GigApp.Domain.Entities.User", "User")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__PaymentMe__UserI__12FDD1B2");

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.User", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.User", "DisabledByUser")
                        .WithMany("InverseDisabledByUser")
                        .HasForeignKey("DisabledByUserId")
                        .HasConstraintName("FK_Users_DisabledByUser");

                    b.Navigation("DisabledByUser");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.UserDevice", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Vendor", b =>
                {
                    b.HasOne("GigApp.Domain.Entities.User", "User")
                        .WithMany("Vendors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Vendors__UserId__01D345B0");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Address", b =>
                {
                    b.Navigation("CompanyLocations");

                    b.Navigation("Freelancers");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Company", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CompanyLocations");

                    b.Navigation("Contracts");

                    b.Navigation("FacilityManagers");

                    b.Navigation("Jobs");

                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Contract", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Job", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("JobQuestionnaires");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.JobApplication", b =>
                {
                    b.Navigation("JobQuestionnaireAnswers");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.JobQuestionnaire", b =>
                {
                    b.Navigation("JobQuestionnaireAnswers");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Companies");

                    b.Navigation("CompanyLocations");

                    b.Navigation("FacilityManagers");

                    b.Navigation("FreelancerLicenses");

                    b.Navigation("InverseDisabledByUser");

                    b.Navigation("JobApplications");

                    b.Navigation("JobQuestionnaireAnswers");

                    b.Navigation("Jobs");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("GigApp.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
